// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TripChat.Entities;

namespace TripChat.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20180130124731_manytomany")]
    partial class manytomany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TripChat.Models.Chat", b =>
                {
                    b.Property<long?>("ChatId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("TimeOfThePost");

                    b.Property<long?>("TripId");

                    b.HasKey("ChatId");

                    b.HasIndex("TripId");

                    b.ToTable("TripChats");
                });

            modelBuilder.Entity("TripChat.Models.Location", b =>
                {
                    b.Property<long?>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<long?>("TripId");

                    b.HasKey("LocationId");

                    b.HasIndex("TripId");

                    b.ToTable("TripLocation");
                });

            modelBuilder.Entity("TripChat.Models.Trip", b =>
                {
                    b.Property<long?>("TripId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateOfTheTrip");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("TimeOfTripPostCreated");

                    b.HasKey("TripId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TripChat.Models.User", b =>
                {
                    b.Property<long?>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("OrganisedTrips");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TripChat.Models.UserTrip", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TripId");

                    b.Property<long?>("TripId1");

                    b.Property<long?>("UserId1");

                    b.HasKey("UserId", "TripId");

                    b.HasIndex("TripId1");

                    b.HasIndex("UserId1");

                    b.ToTable("UserTrip");
                });

            modelBuilder.Entity("TripChat.Models.Chat", b =>
                {
                    b.HasOne("TripChat.Models.Trip", "Trip")
                        .WithMany("TripChats")
                        .HasForeignKey("TripId");
                });

            modelBuilder.Entity("TripChat.Models.Location", b =>
                {
                    b.HasOne("TripChat.Models.Trip", "Trip")
                        .WithMany("TripLocations")
                        .HasForeignKey("TripId");
                });

            modelBuilder.Entity("TripChat.Models.UserTrip", b =>
                {
                    b.HasOne("TripChat.Models.Trip", "Trip")
                        .WithMany("UserTrips")
                        .HasForeignKey("TripId1");

                    b.HasOne("TripChat.Models.User", "User")
                        .WithMany("PostTags")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
